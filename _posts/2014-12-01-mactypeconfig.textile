---
layout: post
title: "Mactype配置文件"
description: "Mactype配置文件"
category: Personality
tags: [Configuration]
---
{% include JB/setup %}

折腾了好久，终于弄出了一个比较满意的配置，为了以后不再折腾，把文件存下来。

*LCD.ini*
<pre>
[General]
Name=LCD
Icon=..\mactray.exe,012

HookChildProcesses=1
【应用到子进程】——比如你用启动方法1启动了一个winrar，双击里面的一个文本文档，那么下一步被打开的“记事本”程序也会使用gdi++渲染。
0：禁用；
1：启用。

HintingMode=1
; 0:Normal 1:NoHinting 2:AutoHinting 3:Light+AutoHinting
【字体微调】——对字体进行细微调整，以实现比较锐利、不模糊的效果。windows的cleartype就是用的这类技术，弊端是会使字体变形、笔画粘在一起。

下面会有两种情况：
情况一，当FontLoader=0（在下面）时：
0：使用字体内部的微调，字体内部没有微调的话就和选1时的效果一样；
1：不使用微调；
2：用freetype对字体进行微调。
（注：1.下面的选了4或5的时候，就算是某个没有内部微调的字体，在此项设定为0时也还是会被应用微调；2.有内部微调的英文字体在下面的AntiAliasMode选择4或5时，推荐将此项设为0。）
情况二，当FontLoader=1（在下面）时：
0和2完全一样，其他同情况一。

AntiAliasMode=4
【抗锯齿模式】
-1：禁用；
0：普通的灰阶渲染；
1：Light模式，由freetype的Reference来渲染；
2、3：RGB/GBR24位色渲染，转为液晶优化（电浆显示器也能用），2和3的区别在于红绿蓝的排列不同；
4、5：就是Light模式下的RGB/GBR24位色渲染，最近版本才加入的新功能，推荐使用！4和5的区别在于红绿蓝的排列不同。


LcdFilter=2
;液晶屏优化，0:None 1:Default 2:Light 16:Legacy

FontLoader=0
【字体的载入方法（注意是载入方法，不是渲染方法）】——上面反复提到的一个设置。
0：用freetype载入字体；
1：用windows的绘图核心载入字体。
很多freetype的设置需要此项选0才能生效。

FontLink=1
【字体链接】——当FontLoader=0（在下面）时：
0：什么都不做；
1：使用注册表里的字体链接设置；
——当FontLoader=1（在下面）时：
会保持启用的状态，但是所有字体链接的处理会交由WIN32API完成。
小贴士：字体链接：估计很多朋友都很熟悉了，windows里处理字体的一种技术。拿注册表里的默认设置举个例子，打开注册表的“HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsNT\CurrentVersion\FontLink\SystemLink”会发现英文字体Tahoma里链接了一些字体，里面有一些是非英文字体，结果就是系统在调用Tahoma时，遇到Tahoma里没有的字符时就会到被链接的字体里去找。

FontSubstitutes=1
【字体替代】——当FontLoader=0（在下面）时：
0：什么都不做；
1：使用该设置文件最下面的设置；
2：该设置文件最下面的设置和注册表里的设置一起启用。
当FontLoader=1（在下面）时：会保持启用的状态，但是所有字体替代的处理会交由WIN32API完成

WidthMode=0
【字体排列】——字宽设置。
0：交还给gdi32.dll处理，有可能出现字体行距过小或者过大的不整齐的现象；
1：使用由freetype计算出来的宽度来排列字体，虽然会更美观一些，但是某些程序下可能出现混乱。

BolderMode=0
【粗体字的渲染方法】——对象字体是没有单独粗体字文件的字体，有单独粗体字文件的字体（如微软雅黑）此项设置不会生效。
0：使用gdi0440以后版本的渲染方式；
1：使用gdi0424以前版本的渲染方式；
2：使用gdi0347以前版本的渲染方式，也就是freetype本身的粗体渲染。

UseMapping=0
【只有在FontLoader=0（在下面）时此项设置才有效。建议选0，选1会占用大量内存，也没看出有什么好处。】

LoadOnDemand=1
;RenderSize=10
MaxHeight=150
【让freetype处理的最大的字体尺寸，单位是像素，0的话就是全尺寸。】

TextTuning=-1
TextTuningR=-1
TextTuningG=-1
TextTuningB=-1
【文字边界设置】——-1时无效（0也是有效的）。TextTuning是RGB三色全局设置，TextTuningR、TextTuningG、TextTuningB是单独设置RGB三色。数字越大越强调背景（类似文字边界被侵蚀的感觉），强调背景会有中字体锐利的感觉。适当降低对比度，提高TextTuning，可以使文字周围的颜色看起来”淡一点“（比如在某些设置下，明明是黑色的字体，看起来却像是”五彩“的）。再加上RenderWeight，把这三个设置的微妙平衡调节好的话，能得到不输给Mac的效果。

CacheMaxFaces=16
CacheMaxSizes=16
CacheMaxBytes=8388608
【字体缓存、内存的设置】——同样的设置在不同的机器上效果完全不同，所以没有什么“最合理的设置”。适当设置的话能减少内存占用（当然再怎么少也少不过不用gdi++），并提高gdi++引擎的稳定性。
较低配置的机器请不要把LoadOnDemand设为1，有死机的危险。

NormalWeight=1
BoldWeight=0
【字体粗细的单独调整】——可以单独设置常规（NormalWeight）、粗体（BoldWeight）状态下的粗细。数字越大越粗，负数也有效，可以使字体更细。

ItalicSlant=0
【字形为斜体时的倾斜加角】——可以设置字形为斜体时的倾斜加角。正数为右倾，负数为左倾。数字越大加角幅度越大。此项设置仅对没有单独斜体字形的字体有效。

Shadow=1,1,10,0x0,0,0x0
;字体阴影设置

GammaMode=0
【Gamma模式开关】
-1：关闭；
0：使用设置的Gamma值（GammaValue）；
1：使用sRGB的Gamma值；
2：不明

GammaValue=1.3
【Gamma值】——只有上面GammaMode=0的时候此项设置才有效。设置的数值可以精确到小数点后面一位。
*注：windows的cleartype的Gamma值是1.4。

RenderWeight=1.3
【字体轮廓】——数字越大字体就越粗越黑（当字体为黑色时，其他颜色时表现出来的是颜色越深）。设置的数值可以精确到小数点后面两位。

Contrast=1.4
EnableKerning=0
MaxBitmap=0
【对比度】——数字越大越锐利，数字越小越发虚。设置的数值可以精确到小数点后面一位。

;单独设置字体格式，=Hinting,AAMode,NormalWeight,BoldWeight,ItalicSlant,Kerning

;除外的字体


[ExcludeModule]
;【除外的程序】——这里设置的程序不使用gdi++渲染。句首加#的行将被注释掉，不会起作用。
fontview.exe
DWM.EXE


;格式


[Experimental@Firefox.exe]
ClipBoxFix=1
[UnloadDll]
[exclude]
[FontSubstitutes]
[Individual]
[excludeSub]
</pre>